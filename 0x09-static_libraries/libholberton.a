/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

/**
 * _islower - checks lowercase letter
 * @c: character
 * Return: 1 if lowercase and 0 if it isn't
 **/
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}

/**
 * _isalpha - check if it is a letter
 *
 * @c: int for letter
 *
 * Return: 1 if a letter and 0 if not
 **/
int _isalpha(int c)
{
	if ((c >= 97 && c <= 122) || (c >= 65 && c <= 90))
		return (1);
	else
		return (0);
}

/**
 * _abs - finds absolute value
 * @n: int absolute value
 * Return: absolute value
 **/
int _abs(int n)
{
	if (n <= 0)
		return (n - (n * 2));
	else
		return (n);
}

/**
 * _isupper - looks to see if letter is uppercase
 * @c: int that represents a letter
 * Return: 1 if c is upper case, and 0 if not
 **/
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}

/**
 * _isdigit - check to see if the int c is a number
 * @c: int to check if it is a digit
 * Return: 1 if its a digit and 0 if not
 **/
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}

/**
 * _strlen - returns string length
 * @s: string
 * Return: nothing
 **/
int _strlen(char *s)
{
	int num;

	for (num = 0; *s != '\0'; s++)
		num++;

	return (num);
}

/**
 * _puts - prints to stdout
 * @str: the string that prints
 * Return: void
 **/
void _puts(char *str)
{
	while (*str)
		_putchar(*str++);
	_putchar('\n');
}

/**
 * _strcpy - copies strings
 * @dest: destination
 * @src: source
 * Return: pointer
 **/
char *_strcpy(char *dest, char *src)
{
	int i;
	int k = _strlen(src);

	for (i = 0; i <= k; i++)
		dest[i] = src[i];
	return (dest);
}

/**
 * _atoi - conversts alpha char to int
 * @s: pointer
 * Return: s
 **/
int _atoi(char *s)

/**
 * _strcat - concat two strings
 * @dest: the destination string
 * @src: the source string
 * Return: dest string pointer
 **/

char *_strcat(char *dest, char *src)
{
	char *str_ret = dest;

	if ((dest != '\0') && (src != '\0'))
	{
		while (*dest != '\0')
		{
			dest++;
		}
		while (*src != '\0')
		{
			*dest++ = *src++;
		}
		*dest = '\0';
	}
	return (str_ret);
}

/**
 * _strncat - concatenants the strings
 * @n: number of characters
 * @dest: destination string
 * @src: source string
 * Return: the dest string
 **/
char *_strncat(char *dest, char *src, int n)
{
	int i;
	int k;

	i = k = 0;
	while (dest[i] != '\0')
		i++;
	while (src[k] != '\0' && k != n)
		dest[i++] = src[k++];
	dest[i] = '\0';
	return (dest);
}

/**
 * *_strncpy - copies a string
 * @dest: dest string
 * @src: source string
 * @n: chars
 * Return: a copy fo the string
 **/
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];
	for (; i < n; i++)
		dest[i] = '\0';
	return (dest);
}

/**
 * _strcmp - compares two strings
 * @s1: first string
 * @s2: second string
 * Return: the difference of the two strings
 **/
int _strcmp(char *s1, char *s2)
{
        while (*s1)
        {
                if (*s1 != *s2)
                        break;

                s1++;
                s2++;
        }
        return (*s1 - *s2);
}

/**
 * _memset - Fills the first n bytes of the memory
 * @s: pointer to where bytes are filled
 * @b: bytes of memory
 * @n: amount of bytes that will be filled
 * Return: memory area of s
 **/
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

/**
 * _memcpy - copies memory area
 * @dest: destination location for memory
 * @src: source location for memory
 * @n: amount of bytes
 * Return: pointer to destination
 **/
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];
	return (dest);
}

/**
 * _strchr - finds a character in a string
 * @s: the string
 * @c: the character trying to find
 * Return: the character or null;
 **/
char *_strchr(char *s, char c)
{
	int i;

	i = 0;
	while (*(s + i))
	{
		if (*(s + i) == c)
			return (s + i);
		i++;
	}
	if (*(s + i) == c)
		return (s + i);
	return ('\0');
}

/**
 * _strspn - gets length
 * @s: string
 * @accept: the string being comparted
 * Return: number of bytes in s
 **/
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, k;

	for (i = 0; s[i]; i++)
	{
		for (k = 0; accept[k]; k++)
		{
			if (s[i] == accept[k])
				break;
		}
		if (!accept[k])
			break;
	}
	return (i);
}

/**
 * _strpbrk - searches for a substring
 * @s: the string being checked
 * @accept: string being checked against s
 * Return: null or pointer to the bytes of s
 **/
char *_strpbrk(char *s, char *accept)
{
	unsigned int i, k;

	for (i = 0; s[i]; i++)
	{
		for (k = 0; accept[k]; k++)
		{
			if (s[i] == accept[k])
				break;
		}
		if (accept[k])
			return (s + i);
	}
	return (0);
}

/**
 * _strstr - finds substring
 * @haystack: where the searching happens
 * @needle: what we're looking for
 * Return: null or a pointer where the subsstring is at
 **/
char *_strstr(char *haystack, char *needle)
{
	char *tmpH, *tmpN;
	char *start = haystack;

	while (*start != '\0')
	{
		tmpH = start;
		tmpN = needle;

		while (*tmpH == *tmpN && *tmpH != '\0' && *tmpN != '\0')
		{
			tmpH++;
			tmpN++;
		}
		if (*tmpN == '\0')
			return (start);
		start++;
	}
	return (0);
}
